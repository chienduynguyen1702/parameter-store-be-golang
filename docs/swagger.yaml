definitions:
  controllers.CreateEnvironment.createEnvironmentRequestBody:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  controllers.CreateParameter.createParameterRequestBody:
    properties:
      name:
        type: string
      value:
        type: string
    required:
    - name
    - value
    type: object
  controllers.CreateStage.createStageRequestBody:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  controllers.CreateUser.createUserRequestBody:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  controllers.Login.loginRequestBody:
    properties:
      email:
        type: string
      organization_name:
        type: string
      password:
        type: string
    required:
    - email
    - organization_name
    - password
    type: object
  controllers.Register.registerRequestBody:
    properties:
      email:
        type: string
      organization_name:
        type: string
      password:
        type: string
    required:
    - email
    - organization_name
    - password
    type: object
  controllers.UpdateEnvironment.updateEnvironmentRequestBody:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  controllers.UpdateStage.updateStageRequestBody:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  controllers.UpdateUserInformation.updateUserRequestBody:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  controllers.organizationBody:
    properties:
      aliasName:
        type: string
      description:
        type: string
      establishmentDate:
        type: string
      name:
        type: string
    type: object
  controllers.projectBody:
    properties:
      currentSprint:
        type: integer
      description:
        type: string
      name:
        type: string
      repoURL:
        type: string
      startAt:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Agent:
    properties:
      apitoken:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      environment:
        $ref: '#/definitions/models.Environment'
      environmentID:
        type: integer
      id:
        type: integer
      name:
        type: string
      projectID:
        type: integer
      stage:
        $ref: '#/definitions/models.Stage'
      stageID:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Environment:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      projectID:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Parameter:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      environment:
        $ref: '#/definitions/models.Environment'
      environmentID:
        type: integer
      id:
        type: integer
      name:
        type: string
      stage:
        $ref: '#/definitions/models.Stage'
      stageID:
        type: integer
      updatedAt:
        type: string
      value:
        type: string
    type: object
  models.Stage:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      projectID:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Version:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      number:
        type: string
      parameters:
        items:
          $ref: '#/definitions/models.Parameter'
        type: array
      projectID:
        type: integer
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.Login.loginRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged in successfully", "user": {email:
            "email", organization_id: "organization_id"}}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to login user"}'
          schema:
            type: string
      summary: Login a user
      tags:
      - Auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout a user
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged out successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to logout user"}'
          schema:
            type: string
      summary: Logout a user
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and organization
      parameters:
      - description: User registration request
        in: body
        name: Creadentials
        required: true
        schema:
          $ref: '#/definitions/controllers.Register.registerRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: "{\"message\": \"User registered successfully\", \"user\":
            {email: \"\temail\", organization_id: \"organization_id\"}}"
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to register user"}'
          schema:
            type: string
      summary: Register a new user and organization
      tags:
      - Auth
  /api/v1/auth/validate:
    get:
      consumes:
      - application/json
      description: Validate a user
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged in successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to validate user"}'
          schema:
            type: string
      summary: Validate a user
      tags:
      - Auth
  /api/v1/organization/:
    get:
      consumes:
      - application/json
      description: Get organization information
      produces:
      - application/json
      responses:
        "200":
          description: '{"organizations": "organizations"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get organization"}'
          schema:
            type: string
      summary: Get organization information
      tags:
      - Organization
    put:
      consumes:
      - application/json
      description: Update organization information
      parameters:
      - description: Organization
        in: body
        name: Organization
        required: true
        schema:
          $ref: '#/definitions/controllers.organizationBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"organizations": "organizations"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get organization"}'
          schema:
            type: string
      summary: Update organization information
      tags:
      - Organization
  /api/v1/organization/projects:
    get:
      consumes:
      - application/json
      description: List projects
      produces:
      - application/json
      responses:
        "200":
          description: '{"projects": "projects"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list projects"}'
          schema:
            type: string
      summary: List projects
      tags:
      - Organization
    post:
      consumes:
      - application/json
      description: Create new project for organization
      parameters:
      - description: Project
        in: body
        name: Project
        required: true
        schema:
          $ref: '#/definitions/controllers.projectBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"project": "project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create project"}'
          schema:
            type: string
      summary: Create new project
      tags:
      - Organization
  /api/v1/organization/projects/{project_id}:
    delete:
      consumes:
      - application/json
      description: Delete project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Project deleted"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to delete project"}'
          schema:
            type: string
      summary: Delete project
      tags:
      - Organization
  /api/v1/project/{project_id}/agents:
    get:
      consumes:
      - application/json
      description: Get agents of project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Agent'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get agents"}'
          schema:
            type: string
      summary: Get agents of project
      tags:
      - Project Detail / Agent
    post:
      consumes:
      - application/json
      description: Create new agent
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Agent
        in: body
        name: Agent
        required: true
        schema:
          $ref: '#/definitions/models.Agent'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Agent created"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create agent"}'
          schema:
            type: string
      summary: Create new agent
      tags:
      - Project Detail / Agent
  /api/v1/project/{project_id}/environments:
    get:
      consumes:
      - application/json
      description: Get all environments
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"environments": "environments"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list environments"}'
          schema:
            type: string
      summary: Get all environments
      tags:
      - Project Detail / Parameters / Environments
    post:
      consumes:
      - application/json
      description: Create new environment
      parameters:
      - description: Environment
        in: body
        name: Environment
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateEnvironment.createEnvironmentRequestBody'
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"environment": "environment"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create environment"}'
          schema:
            type: string
      summary: Create new environment
      tags:
      - Project Detail / Parameters / Environments
  /api/v1/project/{project_id}/environments/{environment_id}:
    delete:
      consumes:
      - application/json
      description: Delete environment
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Environment ID
        in: path
        name: environment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Environment deleted"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to delete environment"}'
          schema:
            type: string
      summary: Delete environment
      tags:
      - Project Detail / Parameters / Environments
    put:
      consumes:
      - application/json
      description: Update environment
      parameters:
      - description: Environment
        in: body
        name: Environment
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateEnvironment.updateEnvironmentRequestBody'
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Environment ID
        in: path
        name: environment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"environment": "environment"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update environment"}'
          schema:
            type: string
      summary: Update environment
      tags:
      - Project Detail / Parameters / Environments
  /api/v1/project/{project_id}/overview:
    get:
      consumes:
      - application/json
      description: Get project overview
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"project": "project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project detail"}'
          schema:
            type: string
      summary: Get project overview
      tags:
      - Project Detail / Overview
    put:
      consumes:
      - application/json
      description: Update project information
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Project
        in: body
        name: Project
        required: true
        schema:
          $ref: '#/definitions/controllers.projectBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"project": "project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update project"}'
          schema:
            type: string
      summary: Update project information
      tags:
      - Project Detail / Overview
  /api/v1/project/{project_id}/parameters:
    get:
      consumes:
      - application/json
      description: Get project parameters
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Parameter'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project parameters"}'
          schema:
            type: string
      summary: Get project parameters
      tags:
      - Project Detail / Parameters
    post:
      consumes:
      - application/json
      description: Create new parameter
      parameters:
      - description: Parameter
        in: body
        name: Parameter
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateParameter.createParameterRequestBody'
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Parameter created"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create parameter"}'
          schema:
            type: string
      summary: Create new parameter
      tags:
      - Project Detail / Parameters
  /api/v1/project/{project_id}/stages:
    get:
      consumes:
      - application/json
      description: Get all stages
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"stages": "stages"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list stages"}'
          schema:
            type: string
      summary: Get all stages
      tags:
      - Project Detail / Parameters / Stages
    post:
      consumes:
      - application/json
      description: Create new stage
      parameters:
      - description: Stage
        in: body
        name: Stage
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateStage.createStageRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: '{"message": "Stage created successfully", "stage": "stage"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create stage"}'
          schema:
            type: string
      summary: Create new stage
      tags:
      - Project Detail / Parameters / Stages
  /api/v1/project/{project_id}/stages/{stage_id}:
    delete:
      consumes:
      - application/json
      description: Delete stage
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Stage ID
        in: path
        name: stage_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Stage deleted successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to delete stage"}'
          schema:
            type: string
      summary: Delete stage
      tags:
      - Project Detail / Parameters / Stages
    put:
      consumes:
      - application/json
      description: Update stage
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Stage ID
        in: path
        name: stage_id
        required: true
        type: string
      - description: Stage
        in: body
        name: Stage
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateStage.updateStageRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Stage updated successfully", "stage": "stage"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update stage"}'
          schema:
            type: string
      summary: Update stage
      tags:
      - Project Detail / Parameters / Stages
  /api/v1/project/{project_id}/versions:
    get:
      consumes:
      - application/json
      description: Get versions of project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Version'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get versions"}'
          schema:
            type: string
      summary: Get versions of project
      tags:
      - Project Detail / Versions
    post:
      consumes:
      - application/json
      description: Create new version
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Version
        in: body
        name: Version
        required: true
        schema:
          $ref: '#/definitions/models.Version'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Version created"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create version"}'
          schema:
            type: string
      summary: Create new version
      tags:
      - Project Detail / Versions
  /api/v1/setting/roles:
    get:
      consumes:
      - application/json
      description: List roles and its permissions
      produces:
      - application/json
      responses:
        "200":
          description: '{"roles": "roles"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list roles"}'
          schema:
            type: string
      summary: List roles
      tags:
      - Setting / Role
  /api/v1/setting/users:
    get:
      consumes:
      - application/json
      description: List users
      produces:
      - application/json
      responses:
        "200":
          description: '{"users": "users"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list users"}'
          schema:
            type: string
      summary: List users
      tags:
      - Setting / User
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateUser.createUserRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: '{"message": "User created successfully", "user": "user"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create user"}'
          schema:
            type: string
      summary: Create user
      tags:
      - Setting / User
  /api/v1/setting/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete user including all its data in user_project_role table
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User deleted"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to delete user"}'
          schema:
            type: string
      summary: Delete user
      tags:
      - Setting / User
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserInformation.updateUserRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User information updated successfully", "user":
            "user"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update user information"}'
          schema:
            type: string
      summary: Update user information
      tags:
      - Setting / User
swagger: "2.0"

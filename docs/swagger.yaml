definitions:
  controllers.CheckParamUsingBody:
    properties:
      parameter_name:
        type: string
    type: object
  controllers.CreateNewVersion.versionName:
    properties:
      description:
        type: string
      release_version:
        type: string
    type: object
  controllers.CreateParameter.createParameterRequestBody:
    properties:
      description:
        type: string
      environment:
        type: string
      name:
        type: string
      stage:
        type: string
      value:
        type: string
    required:
    - name
    - value
    type: object
  controllers.Login.loginRequestBody:
    properties:
      email:
        type: string
      organization_name:
        type: string
      password:
        type: string
    required:
    - email
    - organization_name
    - password
    type: object
  controllers.LoginWithGithubBody:
    properties:
      code:
        type: string
    type: object
  controllers.Register.registerRequestBody:
    properties:
      email:
        type: string
      organization_name:
        type: string
      password:
        type: string
    required:
    - email
    - organization_name
    - password
    type: object
  controllers.UpdateParameter.updateParameterRequestBody:
    properties:
      description:
        type: string
      environment:
        type: string
      name:
        type: string
      stage:
        type: string
      value:
        type: string
    type: object
  controllers.UserRoleBody:
    properties:
      role:
        type: string
      username:
        type: string
    type: object
  controllers.agentRequestBody:
    properties:
      description:
        type: string
      environment:
        type: string
      environment_id:
        type: integer
      last_used_at:
        type: string
      name:
        type: string
      stage:
        type: string
      stage_id:
        type: integer
      workflow_name:
        type: string
    required:
    - description
    - environment
    - name
    - stage
    - workflow_name
    type: object
  controllers.agentResponse:
    properties:
      archived_at:
        type: string
      archived_by:
        type: string
      description:
        type: string
      environment:
        $ref: '#/definitions/models.Environment'
      environment_id:
        type: integer
      id:
        type: integer
      last_used_at:
        type: string
      name:
        type: string
      projectID:
        type: integer
      stage:
        $ref: '#/definitions/models.Stage'
      stage_id:
        type: integer
      workflow_name:
        type: string
    type: object
  controllers.environmentRequestBody:
    properties:
      color:
        type: string
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  controllers.organizationBody:
    properties:
      alias_name:
        type: string
      description:
        type: string
      establishment_date:
        type: string
      name:
        type: string
    required:
    - alias_name
    - description
    - establishment_date
    - name
    type: object
  controllers.projectBody:
    properties:
      auto_update:
        type: boolean
      current_sprint:
        type: string
      description:
        type: string
      name:
        type: string
      repo_api_token:
        type: string
      repo_url:
        type: string
      start_at:
        type: string
    type: object
  controllers.requestAuthAgentBody:
    properties:
      api_token:
        type: string
    required:
    - api_token
    type: object
  controllers.stageRequestBody:
    properties:
      color:
        type: string
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  controllers.userRequestBody:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      new_password:
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - confirm_password
    - email
    - new_password
    - username
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Agent:
    properties:
      api_token:
        type: string
      archived_at:
        type: string
      archived_by:
        description: foreign key to user model
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      environment:
        $ref: '#/definitions/models.Environment'
      environment_id:
        type: integer
      id:
        type: integer
      is_archived:
        type: boolean
      last_used_at:
        type: string
      name:
        type: string
      projectID:
        type: integer
      stage:
        $ref: '#/definitions/models.Stage'
      stage_id:
        type: integer
      updatedAt:
        type: string
      workflow:
        $ref: '#/definitions/models.Workflow'
      workflow_id:
        type: integer
      workflow_name:
        type: string
    type: object
  models.AgentLog:
    properties:
      action:
        type: string
      agent:
        $ref: '#/definitions/models.Agent'
      agent_id:
        type: integer
      agent_pull_parameter_log:
        items:
          $ref: '#/definitions/models.AgentPullParameterLog'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      executed_in_workflow_log:
        $ref: '#/definitions/models.WorkflowLog'
      executed_in_workflow_log_id:
        type: integer
      id:
        type: integer
      latency:
        type: integer
      message:
        type: string
      path:
        type: string
      project:
        $ref: '#/definitions/models.Project'
      project_id:
        type: integer
      response_status:
        type: integer
      updatedAt:
        type: string
    type: object
  models.AgentPullParameterLog:
    properties:
      agent_id:
        type: integer
      agent_log_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      environment:
        $ref: '#/definitions/models.Environment'
      environment_id:
        type: integer
      id:
        type: integer
      parameter:
        $ref: '#/definitions/models.Parameter'
      parameter_id:
        type: integer
      parameter_name:
        type: string
      parameter_value:
        type: string
      project:
        $ref: '#/definitions/models.Project'
      project_id:
        type: integer
      stage:
        $ref: '#/definitions/models.Stage'
      stage_id:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Environment:
    properties:
      archived_at:
        type: string
      archived_by:
        type: string
      color:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      is_archived:
        type: boolean
      name:
        type: string
      project_id:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Parameter:
    properties:
      archived_at:
        type: string
      archived_by:
        description: foreign key to user model
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      edited_at:
        type: string
      environment:
        $ref: '#/definitions/models.Environment'
      environment_id:
        type: integer
      id:
        type: integer
      is_applied:
        type: boolean
      is_archived:
        type: boolean
      is_using_at_file:
        type: string
      name:
        type: string
      project_id:
        type: integer
      stage:
        allOf:
        - $ref: '#/definitions/models.Stage'
        description: "UpdatedBy   User\t\t`gorm:\"foreignKey:UpdatedBy\" json:\"updated_by\"`
          // foreign key to user model"
      stage_id:
        type: integer
      updatedAt:
        type: string
      value:
        type: string
    type: object
  models.Permission:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.Project:
    properties:
      address:
        type: string
      agents:
        items:
          $ref: '#/definitions/models.Agent'
        type: array
      archived_at:
        type: string
      archived_by:
        description: foreign key to user model
        type: string
      auto_update:
        type: boolean
      createdAt:
        type: string
      current_sprint:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      environments:
        items:
          $ref: '#/definitions/models.Environment'
        type: array
      id:
        type: integer
      is_archived:
        type: boolean
      latest_version:
        $ref: '#/definitions/models.Version'
      latest_version_id:
        type: integer
      logs:
        items:
          $ref: '#/definitions/models.ProjectLog'
        type: array
      name:
        type: string
      organization_id:
        type: integer
      parameters:
        items:
          $ref: '#/definitions/models.Parameter'
        type: array
      repo_api_token:
        type: string
      repo_url:
        type: string
      stages:
        items:
          $ref: '#/definitions/models.Stage'
        type: array
      start_at:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      user_role:
        items:
          $ref: '#/definitions/models.UserRoleProject'
        type: array
      versions:
        items:
          $ref: '#/definitions/models.Version'
        type: array
      workflows:
        items:
          $ref: '#/definitions/models.Workflow'
        type: array
    type: object
  models.ProjectLog:
    properties:
      action:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      latency:
        type: integer
      message:
        type: string
      path:
        type: string
      project:
        $ref: '#/definitions/models.Project'
      project_id:
        type: integer
      response_status:
        type: integer
      updatedAt:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Agent   Agent   `json:"agent"`
      user_id:
        description: |-
          AgentID        uint   `gorm:"foreignKey:AgentID" json:"agent_id"`
          IsByUser       bool   `gorm:"default:false" json:"is_by_user"`
        type: integer
    type: object
  models.Role:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      updatedAt:
        type: string
    required:
    - description
    - name
    - permissions
    type: object
  models.Stage:
    properties:
      archived_at:
        type: string
      archived_by:
        type: string
      color:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      is_archived:
        type: boolean
      name:
        type: string
      project_id:
        type: integer
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      archived_at:
        type: string
      archived_by:
        description: foreign key to user model
        type: string
      avatar_url:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      is_archived:
        type: boolean
      is_organization_admin:
        description: Assuming this field represents the ID of the organization the
          user is an admin of
        type: boolean
      last_login:
        type: string
      name:
        type: string
      organization_id:
        description: foreign key to organization model
        type: integer
      password:
        type: string
      phone:
        type: string
      updatedAt:
        type: string
      user_role_projects:
        items:
          $ref: '#/definitions/models.UserRoleProject'
        type: array
      username:
        type: string
    type: object
  models.UserRoleProject:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      project_id:
        type: integer
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Version:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      number:
        type: string
      parameters:
        items:
          $ref: '#/definitions/models.Parameter'
        type: array
      project_id:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Workflow:
    properties:
      attempt_number:
        type: integer
      is_updated_lastest:
        type: boolean
      last_workflow_run_id:
        type: integer
      logs:
        items:
          $ref: '#/definitions/models.WorkflowLog'
        type: array
      name:
        type: string
      path:
        type: string
      project_id:
        description: IsActivated      bool          `gorm:"default:false" json:"is_activated"`
        type: integer
      state:
        type: string
      workflow_id:
        description: |-
          gorm.Model
          ID            uint   `gorm:"primaryKey" json:"id"`
        type: integer
    type: object
  models.WorkflowLog:
    properties:
      agent_logs:
        items:
          $ref: '#/definitions/models.AgentLog'
        type: array
      attempt_number:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      duration:
        type: integer
      id:
        type: integer
      project_id:
        type: integer
      started_at:
        type: string
      state:
        type: string
      updatedAt:
        type: string
      workflow_id:
        type: integer
      workflow_run_id:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/v1/agents/{agent_id}/rerun-workflow:
    post:
      consumes:
      - application/json
      description: Rerun workflow by agent
      parameters:
      - description: Agent ID
        in: path
        name: agent_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "rerun workflow by agent"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to rerun workflow by agent"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Rerun workflow by agent
      tags:
      - Agents
  /api/v1/agents/auth-parameters:
    post:
      consumes:
      - application/json
      description: Get parameter by auth agent
      parameters:
      - description: Request Auth Agent Body
        in: body
        name: requestAuthAgentBody
        required: true
        schema:
          $ref: '#/definitions/controllers.requestAuthAgentBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Parameter retrieved"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to retrieve parameter"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get parameter by auth agent
      tags:
      - Agents
  /api/v1/agents/download:
    get:
      consumes:
      - application/json
      description: Download agent script
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Agent script downloaded"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to download agent script"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Download agent script
      tags:
      - Agents
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.Login.loginRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged in successfully", "user": {email:
            "email", organization_id: "organization_id"}}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to login user"}'
          schema:
            type: string
      summary: Login a user
      tags:
      - Auth
  /api/v1/auth/login/github:
    post:
      consumes:
      - application/json
      description: Login a user with github
      parameters:
      - description: User login with github request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginWithGithubBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged in successfully", "user": {email:
            "email", organization_id: "organization_id"}}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to login user"}'
          schema:
            type: string
      summary: Login a user with github
      tags:
      - Auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout a user
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged out successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to logout user"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Logout a user
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and organization
      parameters:
      - description: User registration request
        in: body
        name: Creadentials
        required: true
        schema:
          $ref: '#/definitions/controllers.Register.registerRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: "{\"message\": \"User registered successfully\", \"user\":
            {email: \"\temail\", organization_id: \"organization_id\"}}"
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to register user"}'
          schema:
            type: string
      summary: Register a new user and organization
      tags:
      - Auth
  /api/v1/auth/validate:
    get:
      consumes:
      - application/json
      description: Validate a user
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged in successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "401":
          description: '{"error": "Failed to validate user"}'
          schema:
            type: string
        "500":
          description: '{"error": "Internal server error"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Validate a user
      tags:
      - Auth
  /api/v1/envs:
    get:
      consumes:
      - application/json
      description: Get all environments
      produces:
      - application/json
      responses:
        "200":
          description: '{"environments": "environments"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list environments"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all environments
      tags:
      - Environments
  /api/v1/organizations/:
    get:
      consumes:
      - application/json
      description: Get organization information
      produces:
      - application/json
      responses:
        "200":
          description: '{"organizations": "organizations"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get organization"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get organization information
      tags:
      - Organization
  /api/v1/organizations/{organization_id}:
    put:
      consumes:
      - application/json
      description: Update organization information
      parameters:
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: integer
      - description: Organization
        in: body
        name: Organization
        required: true
        schema:
          $ref: '#/definitions/controllers.organizationBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"organizations": "organizations"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get organization"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - ApiKeyAuth: []
      summary: Update organization information
      tags:
      - Organization
  /api/v1/organizations/dashboard/logs:
    get:
      consumes:
      - application/json
      description: Get organization dashboard logs
      parameters:
      - description: 'Granularity: day, week, month, quarter, year, default is day'
        in: query
        name: granularity
        type: string
      - description: Start Date format dd-mm-yyyy
        in: query
        name: start_date
        type: string
      - description: Project Name specified, if not specified, get all projects
        in: query
        name: project
        type: string
      - description: End Date format dd-mm-yyyy
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"organizations": "organizations"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get organization"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get organization dashboard logs
      tags:
      - Organization
  /api/v1/organizations/dashboard/totals:
    get:
      consumes:
      - application/json
      description: Get organization dashboard totals
      parameters:
      - description: Start Date format dd-mm-yyyy
        in: query
        name: start_date
        type: string
      - description: Project Name specified, if not specified, get all projects
        in: query
        name: project
        type: string
      - description: End Date format dd-mm-yyyy
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"organizations": "organizations"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get organization"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get organization dashboard totals
      tags:
      - Organization
  /api/v1/project-list/:
    get:
      consumes:
      - application/json
      description: List projects
      produces:
      - application/json
      responses:
        "200":
          description: '{"projects": "projects"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list projects"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: List projects
      tags:
      - Project List
    post:
      consumes:
      - application/json
      description: Create new project for organization
      parameters:
      - description: Project
        in: body
        name: Project
        required: true
        schema:
          $ref: '#/definitions/controllers.projectBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"project": "project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create project"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create new project
      tags:
      - Project List
  /api/v1/project-list/{project_id}:
    delete:
      consumes:
      - application/json
      description: Delete project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Project deleted"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to delete project"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete project
      tags:
      - Project List
  /api/v1/project-list/{project_id}/archive:
    put:
      consumes:
      - application/json
      description: Archive project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Project archived"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to archive project"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Archive project
      tags:
      - Project List
  /api/v1/project-list/{project_id}/unarchive:
    put:
      consumes:
      - application/json
      description: Unarchive project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Project unarchived"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to unarchive project"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Unarchive project
      tags:
      - Project List
  /api/v1/project-list/archived:
    get:
      consumes:
      - application/json
      description: List archived projects
      produces:
      - application/json
      responses:
        "200":
          description: '{"projects": "projects"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list archived projects"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: List archived projects
      tags:
      - Project List
  /api/v1/projects/{project_id}:
    get:
      consumes:
      - application/json
      description: Get all project info
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"projects": "projects"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project info"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all project info
      tags:
      - Project
  /api/v1/projects/{project_id}/agents:
    get:
      consumes:
      - application/json
      description: Get agents of project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.agentResponse'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get agents"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get agents of project
      tags:
      - Project Detail / Agents
    post:
      consumes:
      - application/json
      description: Create new agent
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Agent
        in: body
        name: Agent
        required: true
        schema:
          $ref: '#/definitions/controllers.agentRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Agent created"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create agent"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create new agent
      tags:
      - Project Detail / Agents
  /api/v1/projects/{project_id}/agents/{agent_id}:
    get:
      consumes:
      - application/json
      description: Get agent detail
      parameters:
      - description: Agent ID
        in: path
        name: agent_id
        required: true
        type: string
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Agent'
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get agent by ID"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get agent detail
      tags:
      - Project Detail / Agents
    put:
      consumes:
      - application/json
      description: Update agent
      parameters:
      - description: Agent ID
        in: path
        name: agent_id
        required: true
        type: string
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Agent
        in: body
        name: Agent
        required: true
        schema:
          $ref: '#/definitions/controllers.agentRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Agent updated"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update agent"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update agent
      tags:
      - Project Detail / Agents
  /api/v1/projects/{project_id}/agents/{agent_id}/archive:
    put:
      consumes:
      - application/json
      description: Archive agent
      parameters:
      - description: Agent ID
        in: path
        name: agent_id
        required: true
        type: string
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Agent archived"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to archive agent"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Archive agent
      tags:
      - Project Detail / Agents
  /api/v1/projects/{project_id}/agents/{agent_id}/unarchive:
    put:
      consumes:
      - application/json
      description: Unarchive agent
      parameters:
      - description: Agent ID
        in: path
        name: agent_id
        required: true
        type: string
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Agent unarchived"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to unarchive agent"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Unarchive agent
      tags:
      - Project Detail / Agents
  /api/v1/projects/{project_id}/agents/archived:
    get:
      consumes:
      - application/json
      description: Get archived agents of project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Agent'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get agents"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get archived agents of project
      tags:
      - Project Detail / Agents
  /api/v1/projects/{project_id}/dashboard/logs:
    get:
      consumes:
      - application/json
      description: Get project dashboard logs
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: 'Granularity: day, week, month, quarter, year, default is day'
        in: query
        name: granularity
        type: string
      - description: Start Date format dd-mm-yyyy
        in: query
        name: from
        type: string
      - description: End Date format dd-mm-yyyy
        in: query
        name: to
        type: string
      - description: Workflow ID specified, if not specified, get all workflows
        in: query
        name: workflow_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"logs": "logs"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project dashboard logs"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get project dashboard logs
      tags:
      - Project Detail / Dashboard
  /api/v1/projects/{project_id}/dashboard/totals:
    get:
      consumes:
      - application/json
      description: Get dashboard data
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"dashboard": "dashboard"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get dashboard data"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get dashboard data
      tags:
      - Project Detail / Dashboard
  /api/v1/projects/{project_id}/environments:
    get:
      consumes:
      - application/json
      description: Get all environments in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"environments": "environments"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list environments"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all environments in a project
      tags:
      - Project Detail / Environments
    post:
      consumes:
      - application/json
      description: Create a environment in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Environment creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.environmentRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: '{"message": "Environment created successfully", "environment":
            "environment"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create environment"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a environment in a project
      tags:
      - Project Detail / Environments
  /api/v1/projects/{project_id}/environments/{environment_id}:
    get:
      consumes:
      - application/json
      description: Get a environment in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Environment ID
        in: path
        name: environment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"environment": "environment"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get environment"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get a environment in a project
      tags:
      - Project Detail / Environments
    put:
      consumes:
      - application/json
      description: Update a environment in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Environment ID
        in: path
        name: environment_id
        required: true
        type: string
      - description: Environment update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.environmentRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Environment updated successfully", "environment":
            "environment"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update environment"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a environment in a project
      tags:
      - Project Detail / Environments
  /api/v1/projects/{project_id}/environments/{environment_id}/archive:
    patch:
      consumes:
      - application/json
      description: Archive a environment in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Environment ID
        in: path
        name: environment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Environment archived successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to archive environment"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Archive a environment in a project
      tags:
      - Project Detail / Environments
  /api/v1/projects/{project_id}/environments/{environment_id}/unarchive:
    patch:
      consumes:
      - application/json
      description: Unarchive a environment in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Environment ID
        in: path
        name: environment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Environment unarchived successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to unarchive environment"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Unarchive a environment in a project
      tags:
      - Project Detail / Environments
  /api/v1/projects/{project_id}/environments/archived:
    get:
      consumes:
      - application/json
      description: Get all archived environments in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"environments": "environments"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list archived environments"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all archived environments in a project
      tags:
      - Project Detail / Environments
  /api/v1/projects/{project_id}/overview:
    get:
      consumes:
      - application/json
      description: Get project overview
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"project": "project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project detail"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get project overview
      tags:
      - Project Detail / Overview
    put:
      consumes:
      - application/json
      description: Update project information
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Project
        in: body
        name: Project
        required: true
        schema:
          $ref: '#/definitions/controllers.projectBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"project": "project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update project"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update project information
      tags:
      - Project Detail / Overview
  /api/v1/projects/{project_id}/overview/add-user:
    post:
      consumes:
      - application/json
      description: Add user to project include role
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: UserRoleProject
        in: body
        name: UserRoleProject
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRoleBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User added to project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to add user to project"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add user to project include role
      tags:
      - Project Detail / Overview
  /api/v1/projects/{project_id}/overview/remove-user/{user_id}:
    delete:
      consumes:
      - application/json
      description: Remove user from project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User removed from project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to remove user from project"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Remove user from project
      tags:
      - Project Detail / Overview
  /api/v1/projects/{project_id}/overview/update-user/{user_id}:
    put:
      consumes:
      - application/json
      description: Update user in project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: UserRoleProject
        in: body
        name: UserRoleProject
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRoleBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User updated in project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update user in project"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update user in project
      tags:
      - Project Detail / Overview
  /api/v1/projects/{project_id}/overview/users/{user_id}:
    get:
      consumes:
      - application/json
      description: Get all user in project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"users": "users"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get user in project"}'
          schema:
            type: string
      summary: Get all user in project
      tags:
      - Project Detail / Overview
  /api/v1/projects/{project_id}/parameters:
    get:
      consumes:
      - application/json
      description: Get project parameters
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: string
      - description: Limit number
        in: query
        name: limit
        type: string
      - description: Stages
        in: query
        name: stages
        type: array
      - description: Environments
        in: query
        name: environments
        type: array
      - description: Version
        in: query
        name: version
        type: string
      - description: Search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Parameter'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project parameters"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get project parameters
      tags:
      - Project Detail / Parameters
    post:
      consumes:
      - application/json
      description: Create new parameter
      parameters:
      - description: Parameter
        in: body
        name: Parameter
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateParameter.createParameterRequestBody'
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Parameter created"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create parameter"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create new parameter
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/:
    get:
      consumes:
      - application/json
      description: Get latest parameter
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Parameter'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get latest parameter"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get latest parameter
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/{parameter_id}:
    get:
      consumes:
      - application/json
      description: Get parameter by ID
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Parameter ID
        in: path
        name: parameter_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Parameter'
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get parameter"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get parameter by ID
      tags:
      - Project Detail / Parameters
    put:
      consumes:
      - application/json
      description: Update parameter
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Parameter ID
        in: path
        name: parameter_id
        required: true
        type: string
      - description: Parameter
        in: body
        name: Parameter
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateParameter.updateParameterRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Parameter updated"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update parameter"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update parameter
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/{parameter_id}/archive:
    put:
      consumes:
      - application/json
      description: Archive parameter
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Parameter ID
        in: path
        name: parameter_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Parameter archived"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to archive parameter"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Archive parameter
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/{parameter_id}/get-file-content:
    get:
      consumes:
      - application/json
      description: Get file content
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Parameter ID
        in: path
        name: parameter_id
        required: true
        type: string
      - description: Path file
        in: query
        name: path
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"file as string": "fileAsString"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get file content"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get file content
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/{parameter_id}/search-in-repo:
    get:
      consumes:
      - application/json
      description: Search parameter in repo
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Parameter ID
        in: path
        name: parameter_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Parameter'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to search parameters"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Search parameter in repo
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/{parameter_id}/unarchive:
    put:
      consumes:
      - application/json
      description: Unarchive parameter
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Parameter ID
        in: path
        name: parameter_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Parameter unarchived"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to unarchive parameter"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Unarchive parameter
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/apply:
    post:
      consumes:
      - application/json
      description: Apply parameters in project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Parameters applied"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to apply parameters"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Apply parameters in project
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/archived:
    get:
      consumes:
      - application/json
      description: Get archived parameters
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Parameter'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get archived parameters"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get archived parameters
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/check-using:
    post:
      consumes:
      - application/json
      description: Get file content
      parameters:
      - description: parameter name
        in: body
        name: parameter_name
        schema:
          $ref: '#/definitions/controllers.CheckParamUsingBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"file as string": "fileAsString"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get file content"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get file content
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/download:
    get:
      consumes:
      - application/json
      description: Download lastest parameters in project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Parameter'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get latest parameter"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Download lastest parameters in project
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/download-template:
    get:
      consumes:
      - application/json
      description: Download execel template parameters
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Parameter'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Download execel template parameters
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/upload:
    post:
      consumes:
      - application/json
      description: Upload parameters
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - in: formData
        name: description
        type: string
      - in: formData
        name: environment
        type: string
      - in: formData
        name: environmentID
        type: integer
      - in: formData
        name: name
        type: string
      - in: formData
        name: stage
        type: string
      - in: formData
        name: stageID
        type: integer
      - in: formData
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Parameters uploaded"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to upload parameters"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Upload parameters
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/stages:
    get:
      consumes:
      - application/json
      description: Get all stages in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"stages": "stages"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list stages"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all stages in a project
      tags:
      - Project Detail / Stages
    post:
      consumes:
      - application/json
      description: Create a stage in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Stage creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.stageRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: '{"message": "Stage created successfully", "stage": "stage"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create stage"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a stage in a project
      tags:
      - Project Detail / Stages
  /api/v1/projects/{project_id}/stages/{stage_id}:
    get:
      consumes:
      - application/json
      description: Get a stage in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Stage ID
        in: path
        name: stage_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"stage": "stage"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get stage"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get a stage in a project
      tags:
      - Project Detail / Stages
    put:
      consumes:
      - application/json
      description: Update a stage in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Stage ID
        in: path
        name: stage_id
        required: true
        type: string
      - description: Stage update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.stageRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Stage updated successfully", "stage": "stage"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update stage"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a stage in a project
      tags:
      - Project Detail / Stages
  /api/v1/projects/{project_id}/stages/{stage_id}/archive:
    patch:
      consumes:
      - application/json
      description: Archive a stage in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Stage ID
        in: path
        name: stage_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Stage archived successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to archive stage"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Archive a stage in a project
      tags:
      - Project Detail / Stages
  /api/v1/projects/{project_id}/stages/{stage_id}/unarchive:
    patch:
      consumes:
      - application/json
      description: Unarchive a stage in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Stage ID
        in: path
        name: stage_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Stage unarchived successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to unarchive stage"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Unarchive a stage in a project
      tags:
      - Project Detail / Stages
  /api/v1/projects/{project_id}/stages/archived:
    get:
      consumes:
      - application/json
      description: Get all archived stages in a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"stages": "stages"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list archived stages"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all archived stages in a project
      tags:
      - Project Detail / Stages
  /api/v1/projects/{project_id}/tracking:
    get:
      consumes:
      - application/json
      description: Get project tracking
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"tracking": "tracking"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project tracking"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get project tracking
      tags:
      - Project Detail / Tracking
  /api/v1/projects/{project_id}/versions:
    get:
      consumes:
      - application/json
      description: Get versions of project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Version'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get versions"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get versions of project
      tags:
      - Project Detail / Versions
    post:
      consumes:
      - application/json
      description: Create new version
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Version name
        in: body
        name: versionName
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateNewVersion.versionName'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Version created"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create version"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create new version
      tags:
      - Project Detail / Versions
  /api/v1/projects/{project_id}/workflows:
    get:
      consumes:
      - application/json
      description: Get project workflows
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"workflow": "workflow"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project workflows"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get project workflows
      tags:
      - Project Detail / Workflows
  /api/v1/projects/{project_id}/workflows/{workflow_id}/logs:
    get:
      consumes:
      - application/json
      description: Get workflow history
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Workflow ID
        in: path
        name: workflow_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"workflow": "workflow"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get workflow history"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get workflow history
      tags:
      - Project Detail / Workflows
  /api/v1/projects/{project_id}/workflows/{workflow_id}/logs/{workflow_log_id}/diff-parameter:
    get:
      consumes:
      - application/json
      description: Get diff parameter pulled by agent in 2 nearest workflow log
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Workflow ID
        in: path
        name: workflow_id
        required: true
        type: string
      - description: Workflow Log ID
        in: path
        name: workflow_log_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"workflow": "workflow"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get diff parameter in workflow log"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get diff parameter in workflow log
      tags:
      - Project Detail / Workflows
  /api/v1/projects/{project_id}/workflows/{workflow_id}/run:
    get:
      consumes:
      - application/json
      description: Get workflow process
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Workflow ID
        in: path
        name: workflow_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"workflow": "workflow"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get workflow process"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get workflow process
      tags:
      - Project Detail / Workflows
  /api/v1/settings/roles:
    get:
      consumes:
      - application/json
      description: List roles and its permissions
      produces:
      - application/json
      responses:
        "200":
          description: '{"roles": "roles"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list roles"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: List roles
      tags:
      - Setting / Role
  /api/v1/settings/users:
    get:
      consumes:
      - application/json
      description: List users
      produces:
      - application/json
      responses:
        "200":
          description: '{"users": "users"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list users"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: List users
      tags:
      - Setting / User
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controllers.userRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: '{"message": "User created successfully", "user": "user"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create user"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create user
      tags:
      - Setting / User
  /api/v1/settings/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete user including all its data in user_project_role table
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User deleted"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to delete user"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - Setting / User
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"user": "user"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get user"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - Setting / User
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controllers.userRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User information updated successfully", "user":
            "user"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update user information"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update user information
      tags:
      - Setting / User
  /api/v1/settings/users/{user_id}/archive:
    put:
      consumes:
      - application/json
      description: Archive user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User archived"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to archive user"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Archive user
      tags:
      - Setting / User
  /api/v1/settings/users/{user_id}/restore:
    put:
      consumes:
      - application/json
      description: Restore archived user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User restored"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to unarchive user"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Restore archived user
      tags:
      - Setting / User
  /api/v1/settings/users/archived:
    get:
      consumes:
      - application/json
      description: List archived users
      produces:
      - application/json
      responses:
        "200":
          description: '{"users": "users"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list archived users"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: List archived users
      tags:
      - Setting / User
  /api/v1/stages:
    get:
      consumes:
      - application/json
      description: Get all stages
      produces:
      - application/json
      responses:
        "200":
          description: '{"stages": "stages"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list stages"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all stages
      tags:
      - Stages
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

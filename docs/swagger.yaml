definitions:
  controllers.Login.loginRequestBody:
    properties:
      email:
        type: string
      organization_name:
        type: string
      password:
        type: string
    required:
    - email
    - organization_name
    - password
    type: object
  controllers.Register.registerRequestBody:
    properties:
      email:
        type: string
      organization_name:
        type: string
      password:
        type: string
    required:
    - email
    - organization_name
    - password
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: token
        in: header
        name: Cookie
        type: string
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.Login.loginRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged in successfully", "user": {email:
            "email", organization_id: "organization_id"}}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to login user"}'
          schema:
            type: string
      summary: Login a user
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User registration request
        in: body
        name: Creadentials
        required: true
        schema:
          $ref: '#/definitions/controllers.Register.registerRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: "{\"message\": \"User registered successfully\", \"user\":
            {email: \"\temail\", organization_id: \"organization_id\"}}"
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to register user"}'
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
  /api/v1/auth/validate:
    get:
      consumes:
      - application/json
      description: Validate a user
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged in successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to validate user"}'
          schema:
            type: string
      summary: Validate a user
      tags:
      - Auth
  /api/v1/helloworld:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ping example
      tags:
      - example
  /api/v1/organization/{organization_id}:
    get:
      consumes:
      - application/json
      description: Get organization
      parameters:
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"organizations": "organizations"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get organization"}'
          schema:
            type: string
      summary: Get organization
      tags:
      - Organization
swagger: "2.0"

definitions:
  controllers.CreateParameter.createParameterRequestBody:
    properties:
      name:
        type: string
      value:
        type: string
    required:
    - name
    - value
    type: object
  controllers.CreateUser.createUserRequestBody:
    properties:
      confirmNewPassword:
        type: string
      email:
        type: string
      newPassword:
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - confirmNewPassword
    - email
    - newPassword
    - username
    type: object
  controllers.Login.loginRequestBody:
    properties:
      email:
        type: string
      organization_name:
        type: string
      password:
        type: string
    required:
    - email
    - organization_name
    - password
    type: object
  controllers.Register.registerRequestBody:
    properties:
      email:
        type: string
      organization_name:
        type: string
      password:
        type: string
    required:
    - email
    - organization_name
    - password
    type: object
  controllers.UpdateUserInformation.updateUserRequestBody:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  controllers.organizationBody:
    properties:
      aliasName:
        type: string
      description:
        type: string
      establishmentDate:
        type: string
      name:
        type: string
    type: object
  controllers.projectBody:
    properties:
      currentSprint:
        type: string
      description:
        type: string
      name:
        type: string
      repoURL:
        type: string
      startAt:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Agent:
    properties:
      api_token:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      environment:
        $ref: '#/definitions/models.Environment'
      environment_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      projectID:
        type: integer
      stage:
        $ref: '#/definitions/models.Stage'
      stage_id:
        type: integer
      updatedAt:
        type: string
      workflow_name:
        type: string
    type: object
  models.Environment:
    properties:
      color:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.Parameter:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      environment_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      project_id:
        type: integer
      stage_id:
        type: integer
      updatedAt:
        type: string
      value:
        type: string
    type: object
  models.Permission:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.Role:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      updatedAt:
        type: string
    required:
    - description
    - name
    - permissions
    type: object
  models.Stage:
    properties:
      color:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      archived_at:
        type: string
      archived_by:
        description: foreign key to user model
        type: string
      avatar_url:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      is_archived:
        type: boolean
      is_organization_admin:
        description: Assuming this field represents the ID of the organization the
          user is an admin of
        type: boolean
      last_login:
        type: string
      name:
        type: string
      organization_id:
        description: foreign key to organization model
        type: integer
      password:
        type: string
      phone:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  models.UserRoleProject:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      project_id:
        type: integer
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Version:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      number:
        type: string
      parameters:
        items:
          $ref: '#/definitions/models.Parameter'
        type: array
      project_id:
        type: integer
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/agents/{agent_id}/rerun-workflow:
    post:
      consumes:
      - application/json
      description: Rerun workflow by agent
      parameters:
      - description: Agent ID
        in: path
        name: agent_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "rerun workflow by agent"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to rerun workflow by agent"}'
          schema:
            type: string
      summary: Rerun workflow by agent
      tags:
      - Project Detail / Agents
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.Login.loginRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged in successfully", "user": {email:
            "email", organization_id: "organization_id"}}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to login user"}'
          schema:
            type: string
      summary: Login a user
      tags:
      - Auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout a user
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged out successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to logout user"}'
          schema:
            type: string
      summary: Logout a user
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and organization
      parameters:
      - description: User registration request
        in: body
        name: Creadentials
        required: true
        schema:
          $ref: '#/definitions/controllers.Register.registerRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: "{\"message\": \"User registered successfully\", \"user\":
            {email: \"\temail\", organization_id: \"organization_id\"}}"
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to register user"}'
          schema:
            type: string
      summary: Register a new user and organization
      tags:
      - Auth
  /api/v1/auth/validate:
    get:
      consumes:
      - application/json
      description: Validate a user
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User logged in successfully"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "401":
          description: '{"error": "Failed to validate user"}'
          schema:
            type: string
        "500":
          description: '{"error": "Internal server error"}'
          schema:
            type: string
      summary: Validate a user
      tags:
      - Auth
  /api/v1/envs:
    get:
      consumes:
      - application/json
      description: Get all environments
      produces:
      - application/json
      responses:
        "200":
          description: '{"environments": "environments"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list environments"}'
          schema:
            type: string
      summary: Get all environments
      tags:
      - Environments
  /api/v1/organizations/:
    get:
      consumes:
      - application/json
      description: Get organization information
      produces:
      - application/json
      responses:
        "200":
          description: '{"organizations": "organizations"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get organization"}'
          schema:
            type: string
      summary: Get organization information
      tags:
      - Organization
    put:
      consumes:
      - application/json
      description: Update organization information
      parameters:
      - description: Organization
        in: body
        name: Organization
        required: true
        schema:
          $ref: '#/definitions/controllers.organizationBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"organizations": "organizations"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get organization"}'
          schema:
            type: string
      summary: Update organization information
      tags:
      - Organization
  /api/v1/organizations/projects:
    get:
      consumes:
      - application/json
      description: List projects
      produces:
      - application/json
      responses:
        "200":
          description: '{"projects": "projects"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list projects"}'
          schema:
            type: string
      summary: List projects
      tags:
      - Organization
    post:
      consumes:
      - application/json
      description: Create new project for organization
      parameters:
      - description: Project
        in: body
        name: Project
        required: true
        schema:
          $ref: '#/definitions/controllers.projectBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"project": "project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create project"}'
          schema:
            type: string
      summary: Create new project
      tags:
      - Organization
  /api/v1/organizations/projects/{project_id}:
    delete:
      consumes:
      - application/json
      description: Delete project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Project deleted"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to delete project"}'
          schema:
            type: string
      summary: Delete project
      tags:
      - Organization
  /api/v1/projects/{project_id}:
    get:
      consumes:
      - application/json
      description: Get all project info
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"projects": "projects"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project info"}'
          schema:
            type: string
      summary: Get all project info
      tags:
      - Project
  /api/v1/projects/{project_id}/agents:
    get:
      consumes:
      - application/json
      description: Get agents of project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Agent'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get agents"}'
          schema:
            type: string
      summary: Get agents of project
      tags:
      - Project Detail / Agents
    post:
      consumes:
      - application/json
      description: Create new agent
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Agent
        in: body
        name: Agent
        required: true
        schema:
          $ref: '#/definitions/models.Agent'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Agent created"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create agent"}'
          schema:
            type: string
      summary: Create new agent
      tags:
      - Project Detail / Agents
  /api/v1/projects/{project_id}/overview:
    get:
      consumes:
      - application/json
      description: Get project overview
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"project": "project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project detail"}'
          schema:
            type: string
      summary: Get project overview
      tags:
      - Project Detail / Overview
    put:
      consumes:
      - application/json
      description: Update project information
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Project
        in: body
        name: Project
        required: true
        schema:
          $ref: '#/definitions/controllers.projectBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"project": "project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update project"}'
          schema:
            type: string
      summary: Update project information
      tags:
      - Project Detail / Overview
  /api/v1/projects/{project_id}/overview/add-user:
    post:
      consumes:
      - application/json
      description: Add user to project include role
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: UserRoleProject
        in: body
        name: UserRoleProject
        required: true
        schema:
          $ref: '#/definitions/models.UserRoleProject'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User added to project"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to add user to project"}'
          schema:
            type: string
      summary: Add user to project include role
      tags:
      - Project Detail / Overview
  /api/v1/projects/{project_id}/parameters:
    get:
      consumes:
      - application/json
      description: Get project parameters
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Parameter'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get project parameters"}'
          schema:
            type: string
      summary: Get project parameters
      tags:
      - Project Detail / Parameters
    post:
      consumes:
      - application/json
      description: Create new parameter
      parameters:
      - description: Parameter
        in: body
        name: Parameter
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateParameter.createParameterRequestBody'
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Parameter created"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create parameter"}'
          schema:
            type: string
      summary: Create new parameter
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/parameters/latest:
    get:
      consumes:
      - application/json
      description: Get latest parameter
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Parameter'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get latest parameter"}'
          schema:
            type: string
      summary: Get latest parameter
      tags:
      - Project Detail / Parameters
  /api/v1/projects/{project_id}/versions:
    get:
      consumes:
      - application/json
      description: Get versions of project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Version'
            type: array
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to get versions"}'
          schema:
            type: string
      summary: Get versions of project
      tags:
      - Project Detail / Versions
    post:
      consumes:
      - application/json
      description: Create new version
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Version
        in: body
        name: Version
        required: true
        schema:
          $ref: '#/definitions/models.Version'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Version created"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create version"}'
          schema:
            type: string
      summary: Create new version
      tags:
      - Project Detail / Versions
  /api/v1/settings/roles:
    get:
      consumes:
      - application/json
      description: List roles and its permissions
      produces:
      - application/json
      responses:
        "200":
          description: '{"roles": "roles"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list roles"}'
          schema:
            type: string
      summary: List roles
      tags:
      - Setting / Role
  /api/v1/settings/users:
    get:
      consumes:
      - application/json
      description: List users
      produces:
      - application/json
      responses:
        "200":
          description: '{"users": "users"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list users"}'
          schema:
            type: string
      summary: List users
      tags:
      - Setting / User
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateUser.createUserRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: '{"message": "User created successfully", "user": "user"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to create user"}'
          schema:
            type: string
      summary: Create user
      tags:
      - Setting / User
  /api/v1/settings/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete user including all its data in user_project_role table
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User deleted"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to delete user"}'
          schema:
            type: string
      summary: Delete user
      tags:
      - Setting / User
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserInformation.updateUserRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User information updated successfully", "user":
            "user"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to update user information"}'
          schema:
            type: string
      summary: Update user information
      tags:
      - Setting / User
  /api/v1/settings/users/{user_id}/archive:
    put:
      consumes:
      - application/json
      description: Archive user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User archived"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to archive user"}'
          schema:
            type: string
      summary: Archive user
      tags:
      - Setting / User
  /api/v1/settings/users/{user_id}/restore:
    put:
      consumes:
      - application/json
      description: Restore archived user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User restored"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to unarchive user"}'
          schema:
            type: string
      summary: Restore archived user
      tags:
      - Setting / User
  /api/v1/settings/users/archived:
    get:
      consumes:
      - application/json
      description: List archived users
      produces:
      - application/json
      responses:
        "200":
          description: '{"users": "users"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list archived users"}'
          schema:
            type: string
      summary: List archived users
      tags:
      - Setting / User
  /api/v1/stages:
    get:
      consumes:
      - application/json
      description: Get all stages
      produces:
      - application/json
      responses:
        "200":
          description: '{"stages": "stages"}'
          schema:
            type: string
        "400":
          description: '{"error": "Bad request"}'
          schema:
            type: string
        "500":
          description: '{"error": "Failed to list stages"}'
          schema:
            type: string
      summary: Get all stages
      tags:
      - Stages
swagger: "2.0"
